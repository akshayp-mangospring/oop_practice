I've noticed that it happens with newbie programmers & somewhat experienced programmers as well, they tend to migrate their habits from one language to another. This often happens when they are trying to learn their second programming language, having the habit of building programs in one language for a long time programmers, in the urge of increasing their tech stack or often as the requirement of a new project hurriedly learn the next language, in the process they tend to bring along their habits from the language they already know to the language they are trying to learn. They come with all the good intentions and strong opinions with the analogy that the way stuff worked in previous language must also work in the next language as well.

It can start off with the basic things such as naming conventions, then moving along to other stuff such as idomatic way of writing programs in the language they are trying to learn. I was myself a victim of this situation and have seen many others fall into this trap. Let me share a quick example: My first languages to be learnt while starting to work professionally were HTML, CSS - UI developer. At the time our UI development team had convention of `camelCased` classnames, ids to be placed on the DOM elements to which I kind of disagreed, since we also used Bootstrap framework on many project to build our UI, which followed the convention of hyphenated `class-names` on the DOM, so I was more of the opinion that we should stick to Bootstrap's way or should follow BEM for naming things on the DOM. But the counter argument given to me was that to differentiate our code quickly from the library code such as Bootstrap classes or any other UI framework we must follow a convention that no framework follows. I didn't rebel much with the team at the time since I thought it's more important to build software than to debate about conventions, thus the `camelCased` classnames stuck on our projects. Coincidentally our JS team also had the convention of `camelCased`, so, it didn't matter much to me. The next language which I learn as a part of natural progression was JavaScript, so my first programming language was JS, I learnt to do stuff in JS the JS way - Prototypal inheritance, Functional programming, Asynchronous API calls, etc. But I hit a reality check when I started learning Go - It's a totally different paradigm to program in Go than JS, it has strict typing, no prototypes, pointers, structs, channels, goroutines, it has a plethora of things to learn and it's own set of principles to achieve things. Same goes for Ruby - Object Oriented, dynamically typed, Convention over Configuration, no mention of Functional programming, snake_cased_variables, ease of use, readability. The community of almost all the popular languages are very opinionated about how should we do stuff in that language. I had a hard time wrapping my head around the conventions, concepts and workflows followed in each language. I am sure some of us must have also faced the same situation. But it struck me that most of the times it's valid to have certain conventions in certain languages, since each language is designed to solve a different type of problem. Also ridiculing other experienced developer's opinion just for the sake of our own comfort or convention is totally unjust. We need not get married to our conventions or habits - they need to be flexible enough to be modified or scrapped.

Thus, I want to urge all developers to have a more accepting view towards the idomatic way of doing things in different languages. Go has a different idomatic way than Ruby, same goes for JS or Java and other languages as well. Whenever learning any programming language or working in any programming language we must make sure that we also learn the idomatic way of doing things in that language and should be able to switch our habits easily from one language to another and not try to enforce other language conventions on a language for our own convenience since each language has it's own way of doing things.

This same analogy applies for databases as well, it happened to me when I first learnt MySql then learnt MongoDB, both have different ways of doing the same thing since the idea behind the design and functioning of each DB was totally different. This analogy can be extended to frameworks or software tools as well. For example if Git works in a certain way we might expect SVN also to work in the same way, since both do code versioning, but no, there are some diferences. There can also be subtle differences as well within the same domain, such as Bitbucket & Github.

In such cases we need to master the skill of context switching. We need to take a deep breath, relax, make up our mind & switch habits or conventions to know how to work within that specific language or framework or tool. This principle applies almost universally to software development & software products as well.

But the most important thing I want to point out here is that exchange of ideas or conventions across different programming languages or domains is not a bad thing, it is a thing to be discussed as widely as possible with no hard feelings whatsoever, it is a thing that should be explored and thought over by newbie and experienced programmers alike. It might help the language designers or software developers to add some critical features which they might be missing from the software. Since that's how we grow.
